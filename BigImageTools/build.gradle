apply plugin: 'java-library'
apply plugin: 'eclipse'

version = '0.2.1'

configurations {
	extraLibs // configuration that holds jars to include in the jar
}
	
repositories {
	jcenter()
}

println "ICY_HOME=${System.env.ICY_HOME}"
dependencies {
	configurations.implementation.extendsFrom(configurations.extraLibs)
	// 1 External libraries
	extraLibs 'javax.cache:cache-api:1.1.0' // JCache
	extraLibs 'org.ehcache:ehcache:3.4.0' // Ehcache (JCache implementation)
	
	// 2. Icy libraries
	// 2.1 Core
	implementation files("${System.env.ICY_HOME}/icy.jar") // Icy core
	// 2.2 Libraries
	implementation files("${System.env.ICY_HOME}/lib/bioformats.jar") // Bioformats
	// 2.3 Plugins
	implementation files("${System.env.ICY_HOME}/plugins/adufour/ezplug/EzPlug.jar") // EzPlug
	implementation files("${System.env.ICY_HOME}/plugins/adufour/blocks/Blocks.jar") // Blocks
	implementation files("${System.env.ICY_HOME}/plugins/adufour/protocols/Protocols.jar") // Protocols
	implementation files("${System.env.ICY_HOME}/plugins/adufour/thresholder/Thresholder.jar") // Thresholder
	
	// 3. Test libraries
	testImplementation 'org.hamcrest:hamcrest-all:1.3'
	testImplementation 'junit:junit:4.12'
}

eclipse {
	classpath.downloadJavadoc = true
	project {
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		
		natures += ['icy.icy4eclipse.core.icynature']
		natures += ['org.eclipse.buildship.core.gradleprojectnature']
	}
}

jar {
	from configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.output
	from sourceSets.main.java
	from configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}